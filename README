
$Id$

Hyrax 'Shrew' Build  Project

In the following, $shrew is the full pathname of the 'main' directory
- the directory that contains this README file.

* Contents *

  * Start Here *
  * Organization *
  * Customizing the Build *
  * Debug Build *
  * Background *
  * About the Externally linked projects *
  * Making a copy of shrew that uses a particular set of revisions  *

* Start Here *

The main directory contains configure.ac and Makefile.am (along with
this README and the build_hyrax script) files which are processed
using autoreconf -i to build configure and Makefile.in files
(respectively). Once those are built, run configure to build a
Makefile and then use the 'world' target of the Makefile to build the
server. You should also set PATH so that it searches '$shrew/bin' first
so that the newly-built libdap and BES will be found during the build
process. Since you're likely a developer, it's wise to set $prefix to
'$shrew' as well. 

Synopsis:

export prefix=`pwd`
export PATH=$prefix/bin$PATH
autoreconf -i
./configure
make world

The script 'build_hyrax' does this for you. If you source that instead
of executing it, the modified PATH and the '$prefix' variable will be
left in you shell.

Note: that once 'make world' is run, it's easy to re-run configure
using ./config.status or the Makefile targets in the various C++
source directories. Also, there are a number of other targets that can
be used to build less than the 'world' target. Other targets besides
the standard autoconf targets are:

world: Run the autoreconf and then grind through the whole build, but
not the tests.
autoreconf: Run autoreconf in all the subdirs
hyrax: Build the bes daemon and OLFS (Build == configure, make, make install)
hyrax-check: Test the whole server. no build, just testing
daemon: Build the bes daemon
daemon-check: Test the BES. Again, no build, just testing
libdap: Build libdap
bes: Build bes
modules: Build all of the bes modules
bes-conf: For each module, run the bes-conf target.

Standard targets that are useful:

check: run the tests in all of the subdirectories
clean: run the clean target in all of the subdirs
distclean: This target sets the build so that you can erase various
things made with autoreconf. 
all, or just 'make': runs make in all of the C++ directories
install: Runs install in all of the directories.

* Organization *

Hyrax is made up of three 'architectural' pieces, the OLFS, libdap,
the BES and a collection of modules that are loaded into the BES. The
OLFS, libdap and BES are in the 'src' directory and the BES modules
are in 'src/modules'.

* Customizing the Build *

If you look n the Makefile.am, you'll see that build assumes that
hdf4, 5 and netcdf are located at /usr/local/hdf4, et c., and feeds
those to the configure scripts in the src/modules directory. If you
want to have those configure scripts look for the HDF4, ..., packages
and not use the --with-* option, just set the Makefile variable to
nothing. 

The ncml_module needs a version of ICU.  If this is not in /usr/local
or /usr, the user can specify the installed ICU prefix using:

   --with-icu-prefix=/path/to/icu/prefix

Note: The user will also likely need to set LD_LIBRARY_PATH or 
DYLD_LIBRARY_PATH to include the ICU prefix/lib directory.  Please 
see the ncml_module INSTALL file for more info.

* Debug Build *

The entire shrew project can be built with debug flags (-g3, -O0, 
and others) by running the top level configure with --enable-debug
set:

	./configure --enable-debug

This is highly useful for developers who wish to use shrew as the
meta-project for a debugging environment such as Eclipse.

We also have provided a separate script to build Hyrax with debug
flags automatically.  Rather than sourcing build_hyrax, simply source
build_hyrax_debug instead.

* Background *

How it works: The build first runs autoreconf -i; configure; make and
make install on libdap and then BES. Then it descends into src/modules
and builds each module, running autoreconf -i; configure; make and
make install. Because libdap and BES must be built and installed
first, they are treated specially; the modules are built in any order
(and the operations are carried out differently then for libdap and
the BES - autoreconf is first run for each module, then configure for
each and then make and so on). Adding a new module is simple, just
link it into the modules directory and then add it to the Makefile.am
SUBDIRS variable and the AC_CONFIG_SUBDIRS macro in configure.ac.

* About the Externally linked projects *

This 'project' is made up of a number of projects needed to build an
instance of hyrax. Each external project is listed in the text file
'externals.txt' This project is feed to the svn:externals property as
the property's value.

* Making a copy of shrew that uses a particular set of revisions  *

1. Copy the shrew project without copying the linked (external)
projects using 

    svn copy $svn/trunk/shrew <destination>

Then checkout a copy of <destination> using --ignore-externals so that
you can change the external links the project uses (unless you want to
use the trunk revisions).

    svn checkout --ignore-revisions <destination> <optional dir name>

... and edit the file externals.txt, and checking the result into svn
on the branch or tag. If you need to edit the copy on the trunk,
replace the .txt extension with a date. Then set the value of the
svn:externals property to that new file.

    svn propset svn:externals --file externals.<date> .

But how do you edit the externals file? Using a text editor, change
the lines like:

    ^/trunk/libdap src/libdap

so that the first part is the revision you want to be linked to the
second part. Unless you are doing something really fancy, don't edit
the second part. To make the source revision a specific revision, use
svn info or the Trac browse feature to find the specific revision
number and add it like this:

    ^/trunk/libdap@21560 src/libdap

Now, no matter what happens to the trunk/libdap code, this instance of
shrew will always checkout version 21560 of libdap. 

If instead you want to make this instance of shrew on a branch, you
might want it to grab the newest code of a specific branch of libdap.
In that case, replace ^/trunk/libdap with the path to the branch:

    ^/branch/libdap/4.0.0 src/libdap

Note: The script set_externals.sh can be used to take the template
'externals.txt' file and build a new file where the SVN directories
all have explicit revision numbers matching the stuff in the current
checkout. The usage is 

    set_externals.sh < externals.txt > explicit_revisions.txt

Then you can make the tag and use svn's propset/propedit to wire up
the tag to link to an explicit set of revisions without hunting down
the numbers by hand. 

I think it's a good idea to add/checkin the explicit_revisions.txt
file to the tagged/branched directory as a simple way to document
what's been done.

It's possible to skip using the 'externals.txt' file and go to svn
directly for the list of external links:

    svn pg svn:externals | set_externals > explicit_revisions.txt

But please update the externals.txt file as new directories are linked
in, so that we have a record of what's supposed to be in the 'shrew'
project. 
